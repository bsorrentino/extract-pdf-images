{"version":3,"sources":["pdf2md.global.ts","pdf2md.image.ts","pdf2md.model.ts","pdf2md.page.ts","pdf2md.markdown.ts","pdf2md.main.ts"],"names":[],"mappings":"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","file":"pdf2md.main.js","sourceRoot":"../src","sourcesContent":["import assert = require('assert')\nimport path from 'path'\nimport fs from 'fs'\nimport { promisify } from 'util'\n\nconst checkFileExistsAsync = promisify(fs.access)\nconst readFileAsync = promisify(fs.readFile)\nconst writeFileAsync = promisify(fs.writeFile)\n\ninterface Font {\n    name: string | null\n}\n\ntype FontStat = Font & { occurrence: number }\n\nexport interface Stats {\n    mostUsedFont: string // fontId\n    mostUsedTextHeight: number\n    mostUsedTextDistanceY: number\n    maxTextHeight: number\n    maxHeightFont: string | null\n    textHeigths: Array<number>\n}\n\nclass Globals {\n\n    private _fontMap = new Map<string, FontStat>()\n    private _textHeights = new Map<number, number>()\n\n    outDir: string\n    imageUrlPrefix: string\n    isFillerEnabled = false\n\n    /**\n     * \n     * @param fontId \n     * @param font \n     */\n    addFont(fontId: string, font: Font) {\n\n        assert(font, `font ${fontId} is not valid ${font}`)\n\n        let value = this._fontMap.get(fontId) || { ...font, occurrence: 0 }\n\n        value.occurrence++\n\n        this._fontMap.set(fontId, value)\n\n    }\n\n    /**\n     * \n     * @param fontId \n     */\n    getFont(fontId: string): Font | undefined {\n        return this._fontMap.get(fontId) as Font\n    }\n\n    /**\n     * \n     * @param height \n     */\n    addTextHeight(height: number) {\n\n        let occurrence = this._textHeights.get(height) || 0\n\n        this._textHeights.set(height, ++occurrence)\n\n    }\n\n    private _stats: Stats | null = null\n\n    /**\n     * \n     */\n    get stats(): Stats {\n\n        if (!this._stats) {\n            const calculateMostUsedFont = () => {\n                const [k, _] = Array.from(this._fontMap.entries()).reduce(([k1, v1], [k, v]) => (v.occurrence > v1.occurrence) ? [k, v] : [k1, v1], ['', { occurrence: 0 }])\n                return k\n            }\n\n            const calculateMaxTextHeight = () =>\n                Array.from(this._textHeights.keys()).reduce((result, h) => (h > result) ? h : result)\n\n\n            const calculateMostUsedTextHeight = () => {\n                const [k, _] = Array.from(this._textHeights.entries()).reduce(([k1, v1], [k, v]) => (v > v1) ? [k, v] : [k1, v1], [0, -1])\n                return k\n            }\n\n            this._stats = {\n                maxTextHeight: calculateMaxTextHeight(),\n                maxHeightFont: null,\n                mostUsedFont: calculateMostUsedFont(),\n                mostUsedTextHeight: calculateMostUsedTextHeight(),\n                textHeigths: Array.from(this._textHeights.keys()).sort((a, b) => b - a),\n                mostUsedTextDistanceY: -1,\n            }\n        }\n\n        return this._stats\n\n    }\n\n\n    /**\n     * \n     * @param fontsFile \n     * @param globals \n     */\n    async loadLocalFonts(fontsFile: string) {\n\n        try {\n            await checkFileExistsAsync(fontsFile)\n        }\n        catch (e) {\n            console.warn(`WARN: file ${fontsFile} doesn't exists!`)\n            return\n        }\n\n        try {\n            const contents = await readFileAsync(fontsFile)\n\n            const fonts: { [name: string]: Font } = JSON.parse(contents.toString())\n\n            Object.entries(fonts).forEach(([k, v]) => this.addFont(k, v))\n\n        }\n        catch (e) {\n            console.warn(`WARN: error loading and evaluating ${fontsFile}! - ${e.message}`)\n        }\n    }\n\n    /**\n     * \n     * @param fontMap \n     */\n    async saveFonts(fontsFile: string) {\n\n        try {\n            await checkFileExistsAsync(fontsFile)\n            console.warn(`WARN: file ${fontsFile} already exists!`)\n            return\n        }\n        catch (e) {\n            // correct file doesn't exists\n        }\n\n        try {\n\n            const init:{ [fontId:string]:FontStat } = {}\n\n            const contents = Array.from(this._fontMap.entries())\n                .sort( (e1,e2) => e1[1].occurrence - e2[1].occurrence )\n                .reduce( ( result, e) => { result[ e[0] ] = e[1]; return result } , init )\n            \n            await writeFileAsync(fontsFile, JSON.stringify(contents) )\n\n        }\n        catch (e) {\n            console.warn(`WARN: error writing ${fontsFile}! - ${e.message}`)\n        }\n    }\n\n    constructor() {\n        this.outDir = path.join(process.cwd(), 'out')\n        this.imageUrlPrefix = process.env['IMAGE_URL'] || ''\n    }\n\n}\n\nexport const globals = new Globals()","import { createCanvas } from \"canvas\"\nimport { assert } from \"console\"\nimport fs from \"fs\"\nimport path from 'path'\nimport { promisify } from 'util'\nimport Jimp from 'jimp'\nimport { PDFImage, PDFPageProxy } from \"pdfjs-dist\"\nimport { Globals } from \"./pdf2md.model\"\n\nenum PDFImageKind {\n    GRAYSCALE_1BPP = 1,\n    RGB_24BPP =  2,\n    RGBA_32BPP = 3\n}\n\nconst writeFileAsync = promisify( fs.writeFile )\n\n/**\n * \n * @param img \n * @param name \n */\nexport async function writePageImage( img:PDFImage, name:string, globals:Globals) {\n\n    //console.log( `image ${name} - kind: ${img.kind}`)\n    try {\n  \n      let bytesPerPixel = 0 \n      switch( img.kind ) {\n        case PDFImageKind.RGB_24BPP:\n          bytesPerPixel = 3\n          break\n        case PDFImageKind.RGBA_32BPP:\n          bytesPerPixel = 4\n          break\n        case PDFImageKind.GRAYSCALE_1BPP:\n          assert( `kind ${img.kind} is not supported yet!`)\n          bytesPerPixel = 1\n          break\n        default:\n          assert( `kind ${img.kind} is not supported at all!`)\n          break\n  \n      }\n  \n      const jimg = new Jimp(img.width, img.height)\n      \n      const byteWidth = (img.width*bytesPerPixel)\n  \n      for (var x=0; x<img.width; x++) {\n        for (var y=0; y<img.height; y++) {\n  \n            const index = (y * byteWidth) + (x * bytesPerPixel);\n            const r = img.data[index];\n            const g = img.data[index+1];\n            const b = img.data[index+2];    \n            const a = bytesPerPixel == 3 ? 255 : img.data[index+3]\n  \n            //const num = (r*256) + (g*256*256) + (b*256*256*256) + a;\n  \n            const num = Jimp.rgbaToInt( r, g, b, a)\n            jimg.setPixelColor(num, x, y);\n            \n        }\n      }\n      jimg.write(path.join(globals.outDir, `${name}.png`))\n    }\n    catch( error ) {\n      console.error( `Error:  ${error}`);\n    }\n  \n  }\n  \n  interface CanvasObject  { \n    width:number\n    height:number\n    toBuffer():Buffer \n  } \n  \n  type CanvasContext2D = any\n  \n  type CanvasAndContext = {\n    canvas: CanvasObject,\n    context: CanvasContext2D,\n  }\n  \n  class NodeCanvasFactory {\n  \n    create(width:number, height:number):CanvasAndContext {\n      assert(width > 0 && height > 0, \"Invalid canvas size\");\n      var canvas = createCanvas(width, height);\n      var context = canvas.getContext(\"2d\");\n      return {\n        canvas: canvas,\n        context: context,\n      };\n    }\n  \n    reset(canvasAndContext:CanvasAndContext, width:number, height:number) {\n      assert(canvasAndContext.canvas, \"Canvas is not specified\");\n      assert(width > 0 && height > 0, \"Invalid canvas size\");\n      canvasAndContext.canvas.width = width;\n      canvasAndContext.canvas.height = height;\n    }\n  \n    destroy(canvasAndContext:CanvasAndContext) {\n      assert(canvasAndContext.canvas, \"Canvas is not specified\");\n  \n      // Zeroing the width and height cause Firefox to release graphics\n      // resources immediately, which can greatly reduce memory consumption.\n      canvasAndContext.canvas.width = 0;\n      canvasAndContext.canvas.height = 0;\n      //canvasAndContext.canvas = null;\n      //canvasAndContext.context = null;\n    }\n  }\n  \n  export async function writePageAsImage( page:PDFPageProxy, globals:Globals ) {\n        // Render the page on a Node canvas with 100% scale.\n        const viewport = page.getViewport({ scale: 1.0 });\n      \n        const canvasFactory = new NodeCanvasFactory();\n        \n        const canvasAndContext = canvasFactory.create(\n          viewport.width,\n          viewport.height\n        );\n  \n        const renderContext = {\n          canvasContext: canvasAndContext.context,\n          viewport: viewport,\n          canvasFactory: canvasFactory,\n        };\n  \n        await page.render(renderContext).promise;\n        \n        const content = canvasAndContext.canvas.toBuffer();\n        \n        //console.dir( page )\n        await writeFileAsync( path.join( globals.outDir,  `page-${page.pageIndex}.png`), content )  \n  }\n  ","import { globals } from \"./pdf2md.global\"\n\n\nexport interface Font {\n    name: string | null\n}\n\nexport interface Rect {\n    x: number\n    y: number\n    width: number\n    height: number\n}\n\nexport interface Image extends Rect {\n    url: string\n}\n\nexport interface Word extends Rect {\n    text: string\n    font: string\n\n}\n\nexport interface ItemTransformer<T> {\n    (value: T): T\n}\n\ntype TextTransformer = ItemTransformer<string>\n\nconst FILLER = ' ¶ '\n\nexport class EnhancedWord implements Word {\n    x: number\n    y: number\n    width: number\n    height: number\n    text: string\n    font: string\n\n    private _transformer?: TextTransformer\n\n    constructor(w: Word) {\n        this.x = w.x\n        this.y = w.y\n        this.width = w.width\n        this.height = w.height\n        this.text = w.text\n        this.font = w.font\n    }\n   \n    appendWord(w: Word, isLastWord:boolean ) {\n\n        let result = false\n        const endX = this.x + this.width\n\n        const canConcatFilter = (endX < w.x)\n        const canAppendWord = this.height === w.height && this.font === w.font\n        const fillerWidth = w.x - endX    \n\n        const isWordTextBlank = w.text.trim().length === 0\n\n        if (canAppendWord) {\n\n            if( canConcatFilter && !isWordTextBlank && globals.isFillerEnabled ) {\n                this.text += FILLER.concat(w.text)\n                this.width += w.width + fillerWidth    \n            }\n            else {\n                this.text += w.text\n                this.width += w.width          \n            }\n            result = true  \n        }     \n        else if( isLastWord && canConcatFilter && !isWordTextBlank && globals.isFillerEnabled)  {\n            this.text += FILLER.concat(w.text)\n            this.width += w.width + fillerWidth    \n        }\n\n        return result\n    }\n\n    addTransformer(transformer: TextTransformer) {\n        if (this._transformer) return false // GUARD\n\n        this._transformer = transformer\n\n        ////////////////////////////////////\n        // SUPPORT TRANSFORMER DEBUG\n        ////////////////////////////////////\n        // this._transformer = ( text:string ) => {\n        //     console.log( `transforming text ${text}`)\n        //     const result = transformer( text )\n        //     console.log( `transform text ${text} to ${result}`)\n        //     return result   \n        // }\n\n        ////////////////////////////////////\n        // SUPPORT TRANSFORMER CHAIN\n        ////////////////////////////////////\n\n        // const prev = this._transformer\n        // this._transformer =  ( prev ) ?\n        //     ( text:string ) => transformer(prev(text)) :\n        //     transformer\n        \n    }\n\n    toMarkdown() {\n        return ( this._transformer ) ? this._transformer(this.text) : this.text\n    }\n\n}\n\n\n\n","import assert from \"assert\";\nimport { OPS, PDFImage, PDFPageProxy, Util } from \"pdfjs-dist\";\nimport { globals } from \"./pdf2md.global\";\nimport { writePageImage } from \"./pdf2md.image\";\nimport { EnhancedWord, Rect, Word, Image, Font } from \"./pdf2md.model\";\n\ntype TransformationMatrix = [\n    scalex: number,\n    skevX: number,\n    skevY: number,\n    scaleY: number,\n    transformX: number,\n    transformY: number]\n\n\ntype ConsoleFormat = {\n    x?: number\n    y?: number\n    width?: number\n    height?: number\n    image?: string\n    font?: string\n    text?: string\n}\n\nclass ConsoleOutput {\n\n    lines = Array<ConsoleFormat>()\n\n    // private ellipsisText(text: string, maxChars: number) {\n\n    //     const regex = new RegExp(`(.{${maxChars}})..+`)\n\n    //     return text.replace(regex, \"$1…\")\n    // }\n\n    appendRow(row: Row) {\n\n        if (row.containsImages) {\n            \n            const v = row.images?.map( (img, i) => {\n\n                this.lines.push({ \n                    y: img?.y, \n                    width: img?.width, \n                    x: img?.x,  \n                    height: img?.height, \n                    image: img?.url || 'undefined' \n                })\n\n            })\n        }\n        if (row.containsWords) {\n            const e = row.enhancedText\n\n            const formats = e.map((etext, i) => {\n                //const text = this.ellipsisText(etext.text, 100)\n                const text = etext.text \n                const common = { height: etext.height, image: undefined, text: text, font: etext.font }\n                if (i == 0) {\n                    return {  y: etext.y, width: etext.width, x: etext.x, ...common }\n                }\n                return { width: etext.width, x: etext.x, ...common }\n            })\n\n            this.lines.push(...formats)\n\n        }\n\n    }\n\n}\n\n\nexport class Row {\n    y: number\n    private _images?: Array<Image>\n    private _words?: Array<Word>\n    private _etextArray?:Array<EnhancedWord>\n\n    constructor(args: { y: number , words?: Array<Word>, images?: Array<Image> }) {\n        this.y = args.y\n        this._words = args.words\n        this._images = args.images\n\n        this._updateEnhancedText()\n    }\n\n    get containsWords() { return this._words !== undefined }\n\n    addWord( w:Word ) {\n        this._words?.push( w )\n        this._updateEnhancedText()\n    }\n\n    get containsImages() { return this._images !== undefined }\n\n    addImage( img:Image ) {\n        this._images?.push( img )\n    }\n\n    private _updateEnhancedText() {  \n        if( !this._words || this._words.length == 0) return // GUARD\n        \n        const init = {\n            lastIndex: -1,\n            result: Array<EnhancedWord>()\n        }\n\n        this._etextArray =  this._words.reduce((state, w, index, words ) => {\n\n            if (state.lastIndex < 0) {\n                state.result.push(new EnhancedWord(w))\n                state.lastIndex = 0\n            }\n            else {\n                const isLastWord = index === words.length-1 \n\n                const enhancedText = state.result[state.lastIndex]\n\n                if (!enhancedText.appendWord(w, isLastWord)) {\n                    state.result.push(new EnhancedWord(w))\n                    state.lastIndex++    \n                }\n\n            }\n            return state\n\n        }, init).result\n    }\n \n    get enhancedText() { \n        //this._updateEnhancedText()        \n        return this._etextArray! \n    }\n\n    get images() { return this._images }\n\n    containsTextWithHeight( height:number ) {\n        //this._updateEnhancedText()\n        assert(this._etextArray, 'text array is undefined!')\n        return this._etextArray.findIndex( etext => etext.height == height ) >= 0\n    }\n}\n\n/**\n * \n */\nexport class Page {\n    rows = Array<Row>()\n\n    process(arg: Rect) {\n        if ('text' in arg) {\n            this.processWord(arg as Word)\n        }\n        if ('url' in arg) {\n            this.processImage(arg as Image)\n        }\n        return this\n    }\n\n    private processImage(img: Image) {\n        let si = this.rows.findIndex(row => row.y == img.y)\n        //assert(si < 0, `row ${si} already exists! it is not possible add an image`)\n        let row: Row\n        if (si < 0) {\n            row = new Row({ y: img.y, images: Array<Image>() })\n            this.rows.push(row)\n        }\n        else {\n            row = this.rows[si]\n        }\n        row.addImage(img)\n        return this\n    }\n\n    private processWord(w: Word) {\n        let si = this.rows.findIndex(row => row.y === w.y)\n        let row: Row\n        if (si < 0) {\n            row = new Row({ y: w.y, words: Array<Word>() })\n            this.rows.push(row)\n        }\n        else {\n            row = this.rows[si]\n        }\n\n        //assert( s.containsWords, `row ${si} not containing words! is it contain image?` )\n        if (row.containsWords) {\n            row.addWord(w)\n        }\n        return this\n    }\n\n    /**\n     * \n     */\n    consoleLog() {\n        // Debug\n        const consoleOutput = new ConsoleOutput()\n        this.rows.forEach(row => consoleOutput.appendRow(row))\n        console.table(consoleOutput.lines)\n    }\n\n}\n\nfunction mergeItemsArray(a: Array<Rect>, b: Array<Rect>): Array<Rect> {\n    return a.concat(b)\n}\n\n// A page which holds PageItems displayable via PdfPageView\nexport async function processPage(proxy: PDFPageProxy) {\n\n    const ops = await proxy.getOperatorList()\n\n    // console.log( 'transform', OPS.transform )\n\n    let imageMatrix: TransformationMatrix | null = null\n\n    const images = Array<Image>()\n\n    ops.fnArray.forEach(async (fn, j) => {\n\n        // const s = Object.entries(OPS).find( ([_,v]) => v === fn )\n        // if( s ) console.log( `Operation: ${fn}: ${s[0]} at ${j}` )\n\n        let args = ops.argsArray[j]\n\n        switch (fn) {\n            case OPS.setFont:\n\n                const fontId = args[0];\n\n                let font: Font | null\n                try {\n                    font = proxy.objs.get<Font>(fontId)\n                    if (font)\n                        globals.addFont(fontId, font)\n                }\n                catch (e) {\n                    //console.debug(e.message)\n                    globals.addFont(fontId, { name: '' })\n                }\n\n                break;\n            // @see \n            // https://github.com/mozilla/pdf.js/issues/10498\n            // https://github.com/TomasHubelbauer/globus/blob/master/index.mjs#L63\n            //\n            case OPS.transform:\n                assert(j < ops.argsArray.length, `index ${j} exceed the argsArray size ${ops.argsArray.length}`)\n\n                imageMatrix = <TransformationMatrix>args\n                //console.log( imageMatrix )  \n\n                break;\n            case OPS.paintJpegXObject:\n            case OPS.paintImageXObject:\n\n                const position = { x: 0, y: 0 }\n\n                if (imageMatrix) {\n                    position.x = imageMatrix ? Math.round(imageMatrix[4]) : 0\n                    position.y = imageMatrix ? Math.round(imageMatrix[5]) : 0\n                }\n\n                // console.log( 'image position', position )\n\n                const imageName = args[0];\n\n                const img = proxy.objs.get<PDFImage>(imageName);\n\n                // console.log( `${position.x},${position.y},${img?.width},${img?.height}` )\n                if (img) {\n                    await writePageImage(img, imageName, globals)\n\n                    images.push({\n                        y: position.y,\n                        x: position.x,\n                        width: img.width,\n                        height: img.height,\n                        url: imageName\n                    })\n                }\n\n                imageMatrix = null\n                break\n            default:\n                break;\n        }\n\n    })\n\n    const scale = 1.0;\n\n    const viewport = proxy.getViewport({ scale: scale });\n\n    const textContent = await proxy.getTextContent()\n\n    const words = textContent.items.map(item => {\n\n        const tx = Util.transform(viewport.transform, item.transform)\n\n        const fontHeight = Math.sqrt((tx[2] * tx[2]) + (tx[3] * tx[3]))\n\n        const dividedHeight = item.height / fontHeight;\n\n        const textRect = {\n            x: Math.round(item.transform[4]),\n            y: Math.round(item.transform[5]),\n            width: Math.round(item.width),\n            height: Math.round(dividedHeight <= 1 ? item.height : dividedHeight)\n        }\n\n        //console.log( { text: item.str, ...textRect } )\n        globals.addTextHeight(textRect.height)\n\n        return <Word>{ text: item.str, font: item.fontName, ...textRect }\n\n    });\n\n    const items = mergeItemsArray(words, images)\n\n    const page = items.sort((a, b) => {\n        const r = b.y - a.y\n        return (r === 0) ? a.x - b.x : r\n    })\n    .reduce((page, item) => page.process(item), new Page())\n\n\n    return page\n}\n\n\n","import assert = require('assert')\n\nimport { Enumify } from \"enumify\";\nimport { globals } from './pdf2md.global';\nimport { ItemTransformer } from \"./pdf2md.model\";\nimport { Page, Row } from \"./pdf2md.page\";\n\n\ntype ToText = ItemTransformer<string>\n\n// An Markdown block\nclass BlockType extends Enumify {\n\n    toText: ToText\n\n    constructor(options: {\n        toText: ToText\n    }) {\n        super()\n        this.toText = options.toText\n    }\n\n    static H1 = new BlockType({\n        toText: (block) => `# ${block}`\n    })\n    static H2 = new BlockType({\n        toText: (block) => `## ${block}`\n    })\n    static H3 = new BlockType({\n        toText: (block) => `### ${block}`\n    })\n    static H4 = new BlockType({\n        toText: (block) => `#### ${block}`\n\n    })\n    static H5 = new BlockType({\n        toText: (block) => `##### ${block}`\n    })\n    static H6 = new BlockType({\n        toText: (block) => `###### ${block}`\n    })\n    /*\n        static TOC = new BlockType( {\n            mergeToBlock: true,\n            toText(block:LineItemBlock) {\n                return linesToText(block.items, true);\n            }\n        })\n        static FOOTNOTES = new BlockType({\n            mergeToBlock: true,\n            mergeFollowingNonTypedItems: true,\n            toText(block:LineItemBlock) {\n                return linesToText(block.items, false);\n            }\n        })\n    \n        static CODE = new BlockType( {\n            mergeToBlock: true,\n            toText(block:LineItemBlock) {\n                return '```\\n' + linesToText(block.items, true) + '```'\n            }\n        })\n        static LIST = new BlockType( {\n            mergeToBlock: true,\n            mergeFollowingNonTypedItemsWithSmallDistance: true,\n            toText(block:LineItemBlock) {\n                return linesToText(block.items, false);\n            }\n        })\n        static PARAGRAPH = new BlockType( {\n            toText(block:LineItemBlock) {\n                return linesToText(block.items, false);\n            }\n        })\n    */\n    static _ = BlockType.closeEnum()\n}\n\n\nexport function isHeadline(type: BlockType) {\n    return type && type.enumKey.length == 2 && type.enumKey[0] === 'H'\n}\n\nconst  formatTextDetectingTrailingSpaces = ( text:string, prefix:string, suffix?:string ) =>  {\n    if( !suffix ) suffix = prefix\n    const rx = /^(.+[^\\s])(\\s*)$/.exec(text)\n    return ( rx ) ? `${prefix}${rx[1]}${suffix}${rx[2]}` : 'null'\n}\n\nexport default class WordFormat extends Enumify {\n\n    constructor( public toText:ToText ) { super() }\n\n    static BOLD             = new WordFormat( ( text ) => formatTextDetectingTrailingSpaces(text, '**') )\n\n    static OBLIQUE          = new WordFormat( ( text ) => formatTextDetectingTrailingSpaces(text, '_') )\n\n    static BOLD_OBLIQUE     = new WordFormat( ( text ) => formatTextDetectingTrailingSpaces(text, '**_', '_**') )\n\n    static MONOSPACE        = new WordFormat( ( text ) => formatTextDetectingTrailingSpaces(text, '`') )\n\n    static _ = WordFormat.closeEnum()\n}\n\n// export function blockToText(block: LineItemBlock) {\n//     if (!block.type) {\n//         return linesToText(block.items, false);\n//     }\n//     return block.type.toText(block);\n// }\n\n/**\n * \n * @param level \n */\nfunction blockTypeByLevel(level: number):BlockType {\n\n    const blockType = BlockType.enumValues.find( e => e.enumKey == `H${level}` ) \n\n    assert( blockType, `Unsupported headline level: ${level} (supported are 1-6)` )\n\n    return blockType as BlockType\n}\n\n/**\n * \n * @param row \n * @param globals \n */\nfunction detectHeaders(row: Row) {\n\n    if (row.enhancedText.length == 1) {\n\n        const mostUsedHeight = globals.stats.mostUsedTextHeight\n\n        const etext = row.enhancedText[0];\n\n        if( etext.height != mostUsedHeight || etext.font != globals.stats.mostUsedFont ) {\n\n            const level = globals.stats.textHeigths.findIndex( v => v == etext.height ) \n            assert( level >=0 , `height ${etext.height} not present in textHeights stats!` )\n\n            const blockType = blockTypeByLevel( level+1 )\n            \n            etext.addTransformer(blockType.toText);\n\n        }\n    }\n\n}\n\nfunction detectFonts(row: Row ) {\n\n    row.enhancedText.forEach( etext => {\n\n        const fontId    = etext.font\n        const font      = globals.getFont( fontId )\n\n        if (font && font.name != null && fontId != globals.stats.mostUsedFont) {\n\n            const fontName = font.name.toLowerCase()\n            \n            // console.log( `font['${fontId}']=${fontName}` )\n\n            const isBold = () => fontName.includes('bold')\n            const isItalic = () => fontName.includes('oblique') || fontName.includes('italic')\n            const isCode = () => fontName.includes('monospace') || fontName.includes('code')\n            \n            if (isBold() && isItalic() ) {\n                etext.addTransformer( WordFormat.BOLD_OBLIQUE.toText )              \n            } else if (isBold()) {\n                etext.addTransformer( WordFormat.BOLD.toText )\n            } else if ( isItalic() ) {\n                etext.addTransformer( WordFormat.OBLIQUE.toText );\n            } else if (isCode()) {\n                etext.addTransformer( WordFormat.MONOSPACE.toText )\n            } else if (fontName === globals.stats.maxHeightFont) {\n                etext.addTransformer( WordFormat.BOLD_OBLIQUE.toText )\n            } \n        }\n\n    })\n}\n\nexport function toMarkdown(page: Page ) {\n    //const pageContainsMaxHeight = page.rows.filter(row => row.containsWords).findIndex(row => row.containsTextWithHeight(globals.stats.maxTextHeight)) >= 0\n\n    const init = ''\n\n    return page.rows.reduce((result, row, i) => {\n\n        let md = ''\n        if ( row.images ) {\n         \n            md = row.images.reduce ( (out, img) => \n                    out.concat(`![${img.url}](${globals.imageUrlPrefix}${img.url}.png \"\")`) , '') \n\n        }\n        if (row.containsWords) {\n\n            detectHeaders(row )         \n            detectFonts( row )\n\n            md = row.enhancedText.reduce((out, etext) => out.concat(etext.toMarkdown()), '')\n\n        }\n\n        return result.concat(md).concat('\\n')\n\n    }, init)\n\n} ","import 'pdfjs-dist/es5/build/pdf.js';\nimport fs from 'fs'\nimport path from 'path'\n\nimport { promisify } from 'util'\n\nimport { getDocument } from 'pdfjs-dist'\n\nimport { processPage, Page } from './pdf2md.page';\nimport { toMarkdown } from './pdf2md.markdown';\nimport { globals } from './pdf2md.global';\n\n// Some PDFs need external cmaps.\nconst CMAP_URL = \"../../../node_modules/pdfjs-dist/cmaps/\";\nconst CMAP_PACKED = true;\n\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\n\n\n/**\n * \n * @param pdfPath \n */\nasync function main(pdfPath: string) {\n\n  try {\n\n    const fontFile = path.join('tmp', `${path.basename(pdfPath, '.pdf')}.fonts.json`)\n\n    globals.loadLocalFonts( fontFile )\n    \n    const data = new Uint8Array(await readFile(pdfPath))\n \n    const pdfDocument = await getDocument({\n      data: data,\n      cMapUrl: CMAP_URL,\n      cMapPacked: CMAP_PACKED\n    }).promise\n\n    const numPages = pdfDocument.numPages\n\n    const pages = Array<Page>(numPages)\n    \n    //const originalMetadata = await pdfDocument.getMetadata()\n\n    for (let i = 1; i <= numPages; i++) {\n    //for (let i = 9; i <= 9; i++) {\n\n      // Get the first page.\n      const pdfPage = await pdfDocument.getPage(i)\n\n      const page = await processPage( pdfPage )\n\n      pages.push( page )\n\n    }\n\n    const content = pages.map( page => toMarkdown( page ) )\n                          .reduce( (result, pageText ) => result.concat(pageText), '')\n\n    await writeFile( path.join( globals.outDir, 'out.md'), content )\n\n    globals.saveFonts( fontFile )\n\n    pages.forEach( p => p.consoleLog() )\n    console.table( [ globals.stats ] ); console.log( globals.stats.textHeigths)\n\n  }\n  catch (reason) {\n    console.log(reason)\n  }\n}\n\n\n// STARTUP CODE\n\n\nconst pdfPath = process.argv[2] || \"guidelines.pdf\";\n// const pdfPath = process.argv[2] || path.join('private', 'document1.pdf')\n// const pdfPath = process.argv[2] || path.join('private', 'document2.pdf')\n\nmain(pdfPath).then( () => {} )\n"]}